//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/playerkeybinds.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playerkeybinds: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playerkeybinds()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerkeybinds"",
    ""maps"": [
        {
            ""name"": ""Controlkbm"",
            ""id"": ""89bc117c-db29-4a71-8e3a-a6f92b7fab59"",
            ""actions"": [
                {
                    ""name"": ""Movement "",
                    ""type"": ""PassThrough"",
                    ""id"": ""3e48e429-d712-41ef-b451-5cda39e0c79a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0e17d418-4d85-49c1-8b6e-13400102fcff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd"",
                    ""id"": ""7cdebd88-e340-4af8-a63c-28d1464e6ffc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement "",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""629af5ac-59d8-419f-b95f-d056b8652f89"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbm"",
                    ""action"": ""Movement "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b489489c-3d33-461b-9ae6-cdc0b1ff137e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbm"",
                    ""action"": ""Movement "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""438f9894-7c26-48e2-96bb-659006c3d6d3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbm"",
                    ""action"": ""Movement "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f8548e52-a9e2-4540-aa22-4ba166e9d271"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbm"",
                    ""action"": ""Movement "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""637fda3d-2053-4727-8ea7-ca3cf9f89066"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbm"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""kbm"",
            ""bindingGroup"": ""kbm"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controlkbm
        m_Controlkbm = asset.FindActionMap("Controlkbm", throwIfNotFound: true);
        m_Controlkbm_Movement = m_Controlkbm.FindAction("Movement ", throwIfNotFound: true);
        m_Controlkbm_Aim = m_Controlkbm.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controlkbm
    private readonly InputActionMap m_Controlkbm;
    private List<IControlkbmActions> m_ControlkbmActionsCallbackInterfaces = new List<IControlkbmActions>();
    private readonly InputAction m_Controlkbm_Movement;
    private readonly InputAction m_Controlkbm_Aim;
    public struct ControlkbmActions
    {
        private @Playerkeybinds m_Wrapper;
        public ControlkbmActions(@Playerkeybinds wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Controlkbm_Movement;
        public InputAction @Aim => m_Wrapper.m_Controlkbm_Aim;
        public InputActionMap Get() { return m_Wrapper.m_Controlkbm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlkbmActions set) { return set.Get(); }
        public void AddCallbacks(IControlkbmActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlkbmActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlkbmActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
        }

        private void UnregisterCallbacks(IControlkbmActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
        }

        public void RemoveCallbacks(IControlkbmActions instance)
        {
            if (m_Wrapper.m_ControlkbmActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlkbmActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlkbmActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlkbmActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlkbmActions @Controlkbm => new ControlkbmActions(this);
    private int m_kbmSchemeIndex = -1;
    public InputControlScheme kbmScheme
    {
        get
        {
            if (m_kbmSchemeIndex == -1) m_kbmSchemeIndex = asset.FindControlSchemeIndex("kbm");
            return asset.controlSchemes[m_kbmSchemeIndex];
        }
    }
    public interface IControlkbmActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
